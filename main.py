import asyncio
import logging
import numpy as np
import httpx

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞
TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /check –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å–∫\n/check ‚Äî –∞–Ω–∞–ª–∏–∑\n/help ‚Äî –ø–æ–º–æ—â—å")

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∏–∑ CoinGecko
async def fetch_price_history(coin_id):
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
    params = {"vs_currency": "usd", "days": "2", "interval": "hourly"}

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(url, params=params)
            data = response.json()
            prices = [price[1] for price in data["prices"]]
            return prices
    except Exception as e:
        return None

# üîπ –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ MA20 –∏ MA50
def analyze_moving_average(prices):
    if len(prices) < 50:
        return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

    ma20 = np.mean(prices[-20:])
    ma50 = np.mean(prices[-50:])

    if ma20 > ma50:
        return "long"
    elif ma20 < ma50:
        return "short"
    return "none"

# üîπ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º
async def check_all_strategies():
    PAIRS = ["bitcoin", "ethereum", "solana", "ripple"]
    SYMBOLS = {
        "bitcoin": "BTC/USDT",
        "ethereum": "ETH/USDT",
        "solana": "SOL/USDT",
        "ripple": "XRP/USDT"
    }

    result_lines = []

    for coin_id in PAIRS:
        symbol = SYMBOLS[coin_id]
        prices = await fetch_price_history(coin_id)

        if not prices:
            result_lines.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}")
            continue

        ma_signal = analyze_moving_average(prices)

        if ma_signal == "long":
            result_lines.append(f"üìà {symbol}: –°–∏–≥–Ω–∞–ª –Ω–∞ **LONG** (MA20 > MA50)")
        elif ma_signal == "short":
            result_lines.append(f"üìâ {symbol}: –°–∏–≥–Ω–∞–ª –Ω–∞ **SHORT** (MA20 < MA50)")
        else:
            result_lines.append(f"‚è∏Ô∏è {symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ (MA20 ‚âà MA50)")

    return "\n".join(result_lines)

# üîπ –ö–æ–º–∞–Ω–¥–∞ /check
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")
    result = await check_all_strategies()
    await update.message.reply_text(result)

# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("check", check_command))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())