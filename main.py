from flask import Flask
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import Update
import threading
import asyncio

from strategies import generate_signals

# üîê –¢–í–û–ô –¢–û–ö–ï–ù
TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"

app = Flask(__name__)

@app.route("/")
def index():
    return "–ë–æ—Ç –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞—é—Ç ‚úÖ"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")

# –ö–æ–º–∞–Ω–¥–∞ /signal
async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    signals, explanation, timestamp = generate_signals()
    msg = f"üìä –°–∏–≥–Ω–∞–ª—ã –Ω–∞ {timestamp}:\n\n"
    for pair, action in signals.items():
        reason = explanation.get(pair, "")
        msg += f"{pair}: {action} ‚Äî {reason}\n"
    await update.message.reply_text(msg)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def setup_bot():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("signal", signal))
    await application.run_polling()

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=10000)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    loop = asyncio.get_event_loop()
    loop.create_task(setup_bot())
    loop.run_forever()