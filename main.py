import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

import httpx

# üîê –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"
WEBHOOK_URL = "https://botupgraid.onrender.com/webhook"

# üì¶ Flask + Telegram app
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = ApplicationBuilder().token(TOKEN).build()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))


# üåê Flask: –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"


# üîî Flask: –º–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞
@app.route("/webhook", methods=["POST"])
async def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, application.bot)

        if not application.running:
            await application.initialize()
            await application.start()

        await application.process_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: {e}")
    return "OK", 200


# üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def set_webhook():
    async with httpx.AsyncClient() as client:
        r = await client.post(
            f"https://api.telegram.org/bot{TOKEN}/setWebhook",
            params={"url": WEBHOOK_URL}
        )
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {r.status_code == 200}")


# üß† –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Flask
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_webhook())

    import hypercorn.asyncio
    import hypercorn.config

    config = hypercorn.config.Config()
    config.bind = ["0.0.0.0:10000"]

    loop.run_until_complete(
        hypercorn.asyncio.serve(app, config)
    )