import asyncio
import aiohttp
from quart import Quart
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"
TELEGRAM_CHAT_ID = 776505127

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
active_strategies = {
    "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": True
}

app = Quart(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/strategy ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
        "/check ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
    )


async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if active_strategies:
        message = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + "\n".join(f"- {name}" for name in active_strategies if active_strategies[name])
    else:
        message = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."
    await update.message.reply_text(message)


# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)
async def analyze_market():
    signals = []

    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è BTC/USDT –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT") as resp:
            if resp.status == 200:
                data = await resp.json()
                price = float(data["price"])
                if price < 50000:
                    signals.append("üü¢ BTC/USDT —Å–∏–≥–Ω–∞–ª: LONG (–¶–µ–Ω–∞ –Ω–∏–∂–µ 50,000)")
                else:
                    signals.append("üî¥ BTC/USDT —Å–∏–≥–Ω–∞–ª: SHORT (–¶–µ–Ω–∞ –≤—ã—à–µ 50,000)")
            else:
                signals.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö BTC/USDT")

    return signals


async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not active_strategies:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")
        return

    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")

    try:
        signals = await analyze_market()
        if signals:
            for s in signals:
                await update.message.reply_text(s)
        else:
            await update.message.reply_text("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")


# Telegram bot setup
telegram_app = ApplicationBuilder().token(TOKEN).build()
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("help", help_command))
telegram_app.add_handler(CommandHandler("strategy", strategy))
telegram_app.add_handler(CommandHandler("check", check_command))


# –ó–∞–ø—É—Å–∫ Telegram –∏ Quart –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
async def run():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.updater.start_polling()
    await telegram_app.updater.wait()

@app.before_serving
async def startup():
    asyncio.create_task(run())

@app.route("/")
async def index():
    return "–¢—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."


if __name__ == "__main__":
    import hypercorn.asyncio
    import hypercorn.config

    config = hypercorn.config.Config()
    config.bind = ["0.0.0.0:8000"]
    asyncio.run(hypercorn.asyncio.serve(app, config))