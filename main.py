import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import random

TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
ACTIVE_STRATEGIES = ["–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"]

# –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä
TRADING_PAIRS = ["BTC/USDT", "ETH/USDT", "SOL/USDT", "XRP/USDT"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/strategy ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        "/check ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª—ã"
    )

async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if ACTIVE_STRATEGIES:
        msg = "üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + "\n".join(f"- {s}" for s in ACTIVE_STRATEGIES)
    else:
        msg = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."
    await update.message.reply_text(msg)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
def mock_rsi():
    value = random.randint(10, 90)
    if value > 70:
        return "RSI: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (SHORT)", "short"
    elif value < 30:
        return "RSI: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (LONG)", "long"
    return "RSI: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "none"

def mock_ma():
    direction = random.choice(["long", "short", "none"])
    return f"MA: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction.upper()}", direction

def mock_momentum():
    direction = random.choice(["long", "short", "none"])
    return f"Momentum: {direction.upper()}", direction

def mock_bollinger():
    direction = random.choice(["long", "short", "none"])
    return f"Bollinger: {direction.upper()}", direction

def mock_oi():
    direction = random.choice(["long", "short", "none"])
    return f"OI: {direction.upper()}", direction

def aggregate_signals(signals):
    long_count = signals.count("long")
    short_count = signals.count("short")
    if long_count > short_count and long_count >= 3:
        return "LONG"
    elif short_count > long_count and short_count >= 3:
        return "SHORT"
    return "NONE"

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n"
    for pair in TRADING_PAIRS:
        indicators = []
        directions = []

        rsi_text, rsi_dir = mock_rsi()
        indicators.append(rsi_text)
        directions.append(rsi_dir)

        ma_text, ma_dir = mock_ma()
        indicators.append(ma_text)
        directions.append(ma_dir)

        mom_text, mom_dir = mock_momentum()
        indicators.append(mom_text)
        directions.append(mom_dir)

        boll_text, boll_dir = mock_bollinger()
        indicators.append(boll_text)
        directions.append(boll_dir)

        oi_text, oi_dir = mock_oi()
        indicators.append(oi_text)
        directions.append(oi_dir)

        signal = aggregate_signals(directions)
        msg += f"\n‚ñ∂Ô∏è –ü–∞—Ä–∞: {pair}\n" + "\n".join(indicators) + f"\nüìç –ò—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: *{signal}*\n"
    await update.message.reply_markdown(msg)

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("strategy", strategy))
    app.add_handler(CommandHandler("check", check))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())