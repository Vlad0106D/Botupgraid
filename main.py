import logging
import httpx
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
import nest_asyncio

TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"

logging.basicConfig(level=logging.INFO)
nest_asyncio.apply()  # –¥–ª—è Render

symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT"]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
async def fetch_klines(symbol: str, interval: str = "1h", limit: int = 100):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()
            return [float(candle[4]) for candle in data]  # –∑–∞–∫—Ä—ã—Ç–∏—è
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None

# –†–∞—Å—á—ë—Ç RSI
def calculate_rsi(prices, period: int = 14):
    if len(prices) < period + 1:
        return None
    deltas = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)]
    gains = [d for d in deltas if d > 0]
    losses = [-d for d in deltas if d < 0]
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /check –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/check ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n/strategy ‚Äì –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

# –ö–æ–º–∞–Ω–¥–∞ /strategy
async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (RSI)")

# –ö–æ–º–∞–Ω–¥–∞ /check ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")
    results = []
    for symbol in symbols:
        prices = await fetch_klines(symbol)
        if prices is None:
            results.append(f"{symbol}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            continue
        rsi = calculate_rsi(prices)
        if rsi is None:
            results.append(f"{symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI.")
            continue

        if rsi < 30:
            signal = "üîµ LONG (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)"
        elif rsi > 70:
            signal = "üî¥ SHORT (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)"
        else:
            signal = "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

        results.append(f"{symbol}: RSI = {rsi:.2f} ‚Üí {signal}")

    await update.message.reply_text("\n".join(results))

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("strategy", strategy))
    app.add_handler(CommandHandler("check", check))
    await app.initialize()
    await app.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())