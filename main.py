import logging
import os
import httpx
import asyncio

from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"
WEBHOOK_URL = "https://botupgraid.onrender.com/webhook"

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)
app_telegram = None

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /strategy —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/strategy ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n/check ‚Äî —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")

async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n1. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å: /check)")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    signals = {
        "BTC/USDT": "üîº Long ‚Äî RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º MA.",
        "ETH/USDT": "üîΩ Short ‚Äî Momentum –ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–±–∏—Ç—ã –Ω–∏–∂–Ω–∏–µ –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞.",
        "SOL/USDT": "‚è∏ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã.",
        "XRP/USDT": "üîº Long ‚Äî —Ä–æ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ + –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π RSI."
    }

    message = "üìà –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ¬´–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑¬ª:\n\n"
    for pair, signal in signals.items():
        message += f"{pair}: {signal}\n"

    await update.message.reply_text(message)

# === Webhook ===
@app.post("/webhook")
async def webhook():
    try:
        data = request.get_json()
        update = Update.de_json(data, app_telegram.bot)
        await app_telegram.process_update(update)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: %s", e)
    return {"ok": True}

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    global app_telegram
    app_telegram = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("help", help_command))
    app_telegram.add_handler(CommandHandler("strategy", strategy))
    app_telegram.add_handler(CommandHandler("check", check))

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º process_update
    await app_telegram.initialize()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"https://api.telegram.org/bot{TOKEN}/setWebhook",
            params={"url": WEBHOOK_URL}
        )
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", response.json()["ok"])

    logger.info("Telegram Application –≥–æ—Ç–æ–≤–æ.")

if __name__ == "__main__":
    asyncio.run(main())

    import hypercorn.asyncio
    from hypercorn.config import Config

    config = Config()
    config.bind = ["0.0.0.0:10000"]
    asyncio.run(hypercorn.asyncio.serve(app, config))