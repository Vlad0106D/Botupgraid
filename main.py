import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

BOT_TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"
WEBHOOK_URL = "https://botupgraid.onrender.com/webhook"

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
active_strategies = set()

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# Telegram Application (–±–µ–∑ start/initialize)
app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç. –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìä *–ö–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç–∞:*\n\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/strategy ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        "/strategy_on <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        "/strategy_off <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if active_strategies:
        strategies = "\n".join(f"‚úÖ {s}" for s in active_strategies)
        await update.message.reply_text(f"üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n{strategies}")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")

async def strategy_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        name = context.args[0]
        active_strategies.add(name)
        await update.message.reply_text(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{name}' –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: /strategy_on <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

async def strategy_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        name = context.args[0]
        if name in active_strategies:
            active_strategies.remove(name)
            await update.message.reply_text(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{name}' –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{name}' –Ω–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: /strategy_off <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

# ========== Flask Webhook ==========
@app.post("/webhook")
async def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, app_telegram.bot)
        await app_telegram.process_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: {e}")
    return "OK"

# ========== –ó–∞–ø—É—Å–∫ ==========
async def main():
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("help", help_command))
    app_telegram.add_handler(CommandHandler("strategy", strategy))
    app_telegram.add_handler(CommandHandler("strategy_on", strategy_on))
    app_telegram.add_handler(CommandHandler("strategy_off", strategy_off))

    await app_telegram.bot.set_webhook(WEBHOOK_URL)
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # Flask —á–µ—Ä–µ–∑ Hypercorn
    import hypercorn.asyncio
    from hypercorn.config import Config
    config = Config()
    config.bind = ["0.0.0.0:10000"]
    logger.info("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")
    await hypercorn.asyncio.serve(app, config)

if __name__ == "__main__":
    asyncio.run(main())