import logging
import asyncio
import os

from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import httpx

# === –¢–í–û–ô –¢–û–ö–ï–ù ===
BOT_TOKEN = "7753750626:AAECEmbPksDUXV1KXrAgwE6AO1wZxdCMxVo"
WEBHOOK_URL = "https://botupgraid.onrender.com/webhook"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Flask app ===
flask_app = Flask(__name__)

# === Telegram Application ===
app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook!")

app_telegram.add_handler(CommandHandler("start", start))

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π event loop (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Render) ===
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# === Webhook endpoint ===
@flask_app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), app_telegram.bot)
        logger.info("–ü–æ–ª—É—á–µ–Ω update: %s", update)
        future = asyncio.run_coroutine_threadsafe(app_telegram.process_update(update), loop)
        future.result(timeout=10)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: %s", e)
    return "ok", 200

# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ / (–¥–ª—è Render UI) ===
@flask_app.route("/", methods=["GET"])
def index():
    return "‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook!", 200

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Flask ===
async def set_webhook():
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
            params={"url": WEBHOOK_URL}
        )
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", resp.status_code == 200)

if __name__ == "__main__":
    loop.run_until_complete(set_webhook())
    logger.info("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(host="0.0.0.0", port=10000)